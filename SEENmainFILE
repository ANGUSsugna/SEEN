#include <SPI.h>
#include <Wire.h> //ANGUS
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <Fonts/FreeSerif9pt7b.h>

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3D ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);//ANGUS

#include "pocKonsoLOGO.h"

///// Switches 

const int upButton = 9;              //setting up buttons for pocKonso
int upButtonState = HIGH;
int lastupButtonState = LOW;

const int downButton = 6;            
int downButtonState = HIGH;
int lastdownButtonState = LOW;

const int leftButton = 7;
int leftButtonState = HIGH;
int lastleftButtonState = LOW;

const int rightButton = 8;
int rightButtonState = HIGH;
int lastrightButtonState = LOW;

unsigned long lastDebounceTime = 0; // didn't end up using this code
unsigned long debounceDelay = 50;   // didn't end up using this code

/////////////////ROOMS//////////////
#include "room2doors.h"
#include "twoDoors.h"
#include "sofaWall.h"
#include "library.h"
#include "fourthWall.h"
#include "Book.h"
#include "lounger.h"
#include "dagger.h"
#include "HALL.h"
#include "ARROWWALL.h"
#include "BLANKWall.h"
#include "mirror.h"
#include "lipstick.h"
#include "eye1.h"
#include "eye2.h"
#include "eye3.h"
#include "book1.h"
#include "book2.h"
#include "book3.h"
#include "sofaDetail.h"
  
///////////////////// ROOM LINKS ////////////////

enum buttons {upButtonIndex, downButtonIndex, leftButtonIndex, rightButtonIndex};

enum pages {Room2doors, TwoDoors, SofaWall, Library, fourthwall, book, Lounger, daGGer, hall, arrowwall, blankWall, Mirror, LipStick, Eye1, Eye2, Eye3, booK1, booK2, booK3, SofaDetail,     NUMBER_OF_IMAGES} page;

const int PageLinks[NUMBER_OF_IMAGES][4] = 
{
  {TwoDoors, SofaWall, Library, fourthwall}, // room2doors
  {hall, Room2doors, arrowwall, blankWall}, // twoDoors
  {Mirror, Room2doors, LipStick, SofaDetail}, // sofaWall
  {book, Room2doors, Lounger, daGGer}, // library
  {Eye1, Room2doors, Eye2, Eye3}, // fourthWall
  {booK1, Library, booK2, booK3}, // book
  {Library, Library, Library, Library}, // lounger
  {Library, Library, Library, Library}, // dagger
  {Room2doors, Room2doors, Room2doors, Room2doors}, // HALL
  {TwoDoors, Room2doors,SofaWall, hall}, // ARROW WALL
  {TwoDoors, Room2doors, hall, SofaWall}, //BLANK Wall
  {SofaWall, SofaWall, Lipstick, daGGer}, //mirror
  {SofaWall, SofaWall, daGGer, Mirror}, //lipStick 
  {SofaWall, SofaWall, Mirror, Lipstick}, //dagger
  {fourthwall, fourthwall, fourthwall, fourthwall}, //eye1
  {fourthwall, fourthwall, fourthwall, fourthwall}, //eye2
  {fourthwall, fourthwall, fourthwall, fourthwall}, //eye3
  {book, book, book, book}, // booK1
  {book, book, book, book}, // book2
  {book, book, book, book}, // book3
  {SofaWall, SofaWall, SofaWall, SofaWall}, //sofaDetail 
  
  


  
};



//////////////////////////////////////////

void setup() {
  // put your setup code here, to run once:
Serial.begin(115200);
 
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
   display.setRotation(2);     // Rotate display 180 for pocKonso

pinMode (upButton, INPUT_PULLUP);
pinMode (downButton, INPUT_PULLUP);
pinMode (leftButton, INPUT_PULLUP);
pinMode (rightButton, INPUT_PULLUP);
   
  display.clearDisplay();
  display.setRotation(2);
  display.drawBitmap(0, 0, gImage_pocKonsoLOGO, 128, 64, 1); //This is the pocKonso splash screen
  display.display();

      delay(2000);
      display.clearDisplay();     // clear the display 

page = Room2doors;  // Initial page
displayImage(page);
}

}
void loop() {
  // put your main code here, to run repeatedly:
  static int upButtonPreviousState = HIGH;
  static int downButtonPreviousState = HIGH;
  static int leftButtonPreviousState = HIGH;
  static int rightButtoPreviousnState = HIGH;
  
  int upButtonState = digitalRead(UpButtonPin);
  int downButtonState = digitalRead(DownButtonPin);
  int leftButtonState = digitalRead(LeftButtonPin);
  int rightButtonState = digitalRead(RightButtonPin);
                    

  if (upButtonState != upButtonPreviousState)
  {
    upButtonPreviousState = upButtonState;
    if (upButtonState == LOW)
     {      // button just pressed // Follow the link for the current page and button
      page = PageLinks[page][UpButtonIndex]; 
      displayImage(page);    
     }         
    }
    if (downButtonState != downButtonPreviousState)
  {
    downButtonPreviousState = downButtonState;
    if (downButtonState == LOW)
     {
      // button just pressed
      // Follow the link for the current pagbe and button
      page = PageLinks[page][UpButtonIndex]; 
      displayImage(page);    
     }         
    }
}
